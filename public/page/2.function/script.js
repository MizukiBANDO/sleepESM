import { sleepStartItemList, sleepEndItemList } from '../../script/api.js';

const tempExists = localStorage.getItem('sleepTemp');
const defaultTabId = tempExists ? 'end-tab' : 'start-tab';

function showSleepStartInfo() {
  const sleepStartDisplay = document.getElementById('sleepStartDisplay');
  const temp = localStorage.getItem('sleepTemp');
  if (temp) {
    const { sleepStart } = JSON.parse(temp);
    if (sleepStart) {
      const formatted = new Date(sleepStart).toLocaleString('ja-JP', {
        year:   'numeric',
        month:  '2-digit',
        day:    '2-digit',
        hour:   '2-digit',
        minute: '2-digit'
      });
      sleepStartDisplay.textContent = `üõèÔ∏è „ÅÇ„Å™„Åü„ÅØ ${formatted} „Å´ÂØùÂßã„ÇÅ„Åæ„Åó„Åü`;
    } else {
      sleepStartDisplay.textContent = 'üõèÔ∏è ÂØùÂßã„ÇÅ„ÅÆÊôÇÈñì„ÅØË®òÈå≤„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì';
    }
  } else {
    sleepStartDisplay.textContent = '';
  }
};

function handleStartSleep() {
  const now = new Date();
  const existingTemp = localStorage.getItem('sleepTemp');
  if (existingTemp) {
    const prev = JSON.parse(existingTemp);
    const prevDate = new Date(prev.sleepStart);
    const prevKey = `${prevDate.getFullYear()}-${String(prevDate.getMonth() + 1).padStart(2, '0')}`;
    const records = JSON.parse(localStorage.getItem(prevKey) || '[]');
    records.push(prev);
    localStorage.setItem(prevKey, JSON.stringify(records));
    alert('‚ö†Ô∏è ÂâçÂõû„ÅÆË®òÈå≤„ÅåÊú™ÂÆå‰∫Ü„Åß„Åó„Åü„ÄÇ„Åù„ÅÆ„Åæ„Åæ‰øùÂ≠ò„Åó„Åæ„Åô„ÄÇ');
  }

  const startChecklistValues = {};
  sleepStartItemList.forEach(item => {
    if (item.type === 'check') {
      const el = document.getElementById(`start-check-${item.key}`);
      startChecklistValues[item.key] = el ? el.checked : false;
    } else if (item.type === 'number') {
      const selected = document.querySelector(`input[name="${item.key}"]:checked`);
      startChecklistValues[item.key] = selected ? Number(selected.value) : null;
    }
  });

  const tempRecord = {
    id:              now.toISOString(),
    sleepStart:      now.toISOString(),
    sleepEnd:        null,
    completed:       false,
    startChecklist:  startChecklistValues
  };

  localStorage.setItem('sleepTemp', JSON.stringify(tempRecord));
  alert("üõèÔ∏è Sleep started!");

  new bootstrap.Tab(document.getElementById('end-tab')).show();
  showSleepStartInfo();
  resetChecklist('sleepStart');
}

function handleEndSleep() {
  const now = new Date();
  const temp = localStorage.getItem('sleepTemp');
  let record;

  if (temp) {
    record = JSON.parse(temp);
    record.sleepEnd = now.toISOString();
    record.completed = true;
    localStorage.removeItem('sleepTemp');
    alert("‚òÄÔ∏è Sleep ended and saved!");
  } else {
    record = {
      id: now.toISOString(),
      sleepStart: null,
      sleepEnd: now.toISOString(),
      completed: false
    };
    alert("‚ö†Ô∏è sleepStart „ÅåÊú™Ë®òÈå≤„ÅÆ„Åæ„Åæ sleepEnd „Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü„ÄÇ");
  }
  const endChecklist = {};
  sleepEndItemList.forEach(item => {
    const checked = document.getElementById(`end-check-${item.key}`).checked;
    endChecklist[item.key] = checked;
  });

  record.endChecklist = endChecklist; // ËøΩÂä†„Åó„Å¶‰øùÂ≠ò

  const key = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;
  const records = JSON.parse(localStorage.getItem(key) || '[]');
  records.push(record);
  localStorage.setItem(key, JSON.stringify(records));

  // Start„Çø„Éñ„Å´Êàª„Çã
  new bootstrap.Tab(document.getElementById('start-tab')).show();
  resetChecklist('sleepEnd');

  if (temp) {
    record = JSON.parse(temp);
    record.sleepEnd = now.toISOString();
    record.completed = true;
    localStorage.removeItem('sleepTemp');
  
    // ‚úÖ ‚úÖ ‚úÖ Êù°‰ª∂„ÇíÊ∫Ä„Åü„Åó„Åü„Çâ credit / point „Çí 1 Â¢ó„ÇÑ„Åô
    const startDate = new Date(record.sleepStart);
    const diffMs = now - startDate;
    const diffHrs = diffMs / (1000 * 60 * 60); // ÊôÇÈñì„Å´Â§âÊèõ
  
    if (diffHrs >= 0) { // Áú†„Å£„ÅüÊôÇÈñìÊï∞ testÊôÇ„ÅØ0ÊôÇÈñì
      const currentCredit = parseInt(localStorage.getItem('credit') || '0', 10);
      const currentPoint = parseInt(localStorage.getItem('point') || '0', 10);
      localStorage.setItem('credit', String(currentCredit + 1));
      localStorage.setItem('point', String(currentPoint + 1));
      alert("üéâ „Çà„Åè„Å≠„Åæ„Åó„ÅüÔºÅcredit„Å®point„Åå1„Åö„Å§Â¢ó„Åà„Åæ„Åó„Åü");
    }
    // ‚úÖ ‚úÖ ‚úÖ „Åì„Åì„Åæ„Åß
  }
};

async function updateServiceWorker() {
  if (!('serviceWorker' in navigator)) {
    alert('„Åì„ÅÆ„Éñ„É©„Ç¶„Ç∂„ÅØService Worker„Å´ÂØæÂøú„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ');
    return;
  }

  try {
    // „Ç≠„É£„ÉÉ„Ç∑„É•ÂâäÈô§
    const keys = await caches.keys();
    for (const key of keys) {
      await caches.delete(key);
    }

    // Service Worker Êõ¥Êñ∞
    const reg = await navigator.serviceWorker.getRegistration();
    if (reg) {
      await reg.update();
      alert('üîÑ „Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÂâäÈô§„Åó„ÄÅService Worker „ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü„ÄÇ„Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø„Åó„Åæ„Åô„ÄÇ');
      location.reload();
    } else {
      alert('‚ùó Service Worker „ÅåÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ');
    }
  } catch (err) {
    alert('‚ùå PWAÊõ¥Êñ∞‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    console.error('SW update error:', err);
  }
};

async function registerServiceWorker() {
  try {
    const registration = await navigator.serviceWorker.register('service-worker.js');
    alert('‚úÖ Service Worker ÁôªÈå≤ÂÆå‰∫Ü');
    console.log('Service Worker registered:', registration);
  } catch (err) {
    alert('‚ùå ÁôªÈå≤Â§±Êïó');
    console.error('Service Worker registration error:', err);
  }
};

function resetChecklist(prefix, attempt = 1) {
  const container = document.getElementById(`${prefix}Checklist`);
  if (!container) {
    console.warn(`‚ùå ${prefix}Checklist „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì`);
    return;
  }

  const checkboxes = container.querySelectorAll('input[type="checkbox"]');
  const radios = container.querySelectorAll('input[type="radio"]');

  if (checkboxes.length === 0 && radios.length === 0) {
    if (attempt >= 3) {
      console.warn(`‚ùå ${prefix}Checklist „ÅÆÂàùÊúüÂåñ„Å´Â§±ÊïóÔºàÊúÄÂ§ßË©¶Ë°åÂõûÊï∞Ôºâ`);
      return;
    }

    console.warn(`‚ö†Ô∏è ${prefix}Checklist „ÅåÊú™ÊèèÁîª„ÄÇÂÜçË©¶Ë°å (${attempt}/3)...`);
    setTimeout(() => resetChecklist(prefix, attempt + 1), 50);  // Ê¨°„ÅÆË©¶Ë°å„Å∏
    return;
  }

  // ‚úÖ checkbox „ÅÆ„É™„Çª„ÉÉ„Éà
  checkboxes.forEach(el => el.checked = false);

  // ‚úÖ radio „ÅÆ„É™„Çª„ÉÉ„Éà
  radios.forEach(el => el.checked = false);

  console.log(`‚úÖ ${prefix}Checklist „ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ„Å®Êï∞ÂÄ§„ÇíÂàùÊúüÂåñ„Åó„Åæ„Åó„Åü`);
}


setContent();
function setContent(){
  // ‚úÖ ÂàùÊúüË°®Á§∫„Çø„Éñ„ÅÆÊ±∫ÂÆö
  new bootstrap.Tab(document.getElementById(defaultTabId)).show();
  showSleepStartInfo(); // ÂØùÂßã„ÇÅ„ÅüÊôÇÈñì„ÅÆË°®Á§∫

  // ‚úÖ Start Sleep / End Sleep Âá¶ÁêÜ
  const startBtn = document.getElementById('startSleepBtn');
  const endBtn   = document.getElementById('endSleepBtn');
  startBtn.addEventListener('click', () => { handleStartSleep() });
  endBtn.addEventListener('click', () => { handleEndSleep() });

  // PWAÁôªÈå≤„ÉªÊõ¥Êñ∞Áî®„Éú„Çø„É≥Âà∂Âæ°    // ÁôªÈå≤„Éú„Çø„É≥ Êõ¥Êñ∞„Éú„Çø„É≥
  const registerBtn = document.getElementById('registerSW');
  const updateBtn   = document.getElementById('updateSW');
  if ('serviceWorker' in navigator) {
    registerBtn.addEventListener('click', () => { registerServiceWorker() });
    updateBtn.addEventListener('click', () => { updateServiceWorker() });
  } else {
    alert('„Åì„ÅÆ„Éñ„É©„Ç¶„Ç∂„ÅØService Worker„Å´ÂØæÂøú„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ');
    registerBtn.disabled = true;
    updateBtn.disabled   = true;
  }
};


// È†ÖÁõÆ
// ‚úÖ Áù°Áú†ÈñãÂßãÁî®„ÉÅ„Çß„ÉÉ„ÇØ„É™„Çπ„Éà„ÅÆÁîüÊàê

function renderChecklist(containerId, itemList, prefix) {
  const container = document.getElementById(containerId);
  container.innerHTML = '';

  // Èô§Â§ñ„É™„Çπ„Éà„ÇíË™≠„ÅøËæº„ÅøÔºà‰æã: ['check:alcohol', 'number:stress']Ôºâ
  const excluded = JSON.parse(localStorage.getItem('excludedItems') || '[]');

  itemList.forEach(item => {
    const itemId = `${item.type}:${item.key}`;
    if (excluded.includes(itemId)) return; // Èô§Â§ñÂØæË±°„Å™„Çâ„Çπ„Ç≠„ÉÉ„Éó

    const wrapper = document.createElement('div');
    wrapper.className = 'mb-3';

    if (item.type === 'check') {
      wrapper.classList.add('form-switch');

      const input = document.createElement('input');
      input.type = 'checkbox';
      input.className = 'form-check-input me-2';
      input.name = item.key;
      input.id = `${prefix}-check-${item.key}`;

      const label = document.createElement('label');
      label.className = 'form-check-label';
      label.htmlFor = input.id;
      label.textContent = item.label;

      wrapper.appendChild(input);
      wrapper.appendChild(label);

    } else if (item.type === 'number') {
      const max = parseInt(item.num, 10);
      const start = parseInt(item.numStart || '0', 10);
      const end = start + max - 1;
      const leftLabelText = item.left || 'Â∞ë„Å™„ÅÑ';
      const rightLabelText = item.right || 'Â§ö„ÅÑ';

      const label = document.createElement('label');
      label.className = 'form-label d-block fw-bold mb-1';
      label.textContent = item.label;
      wrapper.appendChild(label);

      const radioRow = document.createElement('div');
      radioRow.className = 'd-flex align-items-center gap-2 flex-wrap';

      const leftText = document.createElement('span');
      leftText.className = 'text-muted small me-2';
      leftText.textContent = leftLabelText;
      radioRow.appendChild(leftText);

      const radioGroup = document.createElement('div');
      radioGroup.className = 'btn-group';
      radioGroup.role = 'group';

      for (let i = start; i <= end; i++) {
        const id = `${prefix}-num-${item.key}-${i}`;

        const input = document.createElement('input');
        input.type = 'radio';
        input.className = 'btn-check';
        input.name = item.key;
        input.id = id;
        input.value = i;

        const radioLabel = document.createElement('label');
        radioLabel.className = 'btn btn-outline-secondary';
        radioLabel.htmlFor = id;
        radioLabel.textContent = i;

        radioGroup.appendChild(input);
        radioGroup.appendChild(radioLabel);
      }

      radioRow.appendChild(radioGroup);

      const rightText = document.createElement('span');
      rightText.className = 'text-muted small ms-2';
      rightText.textContent = rightLabelText;
      radioRow.appendChild(rightText);

      wrapper.appendChild(radioRow);
    }

    container.appendChild(wrapper);
  });
}






renderChecklist('sleepStartChecklist', sleepStartItemList, 'start');
renderChecklist('sleepEndChecklist', sleepEndItemList, 'end');

